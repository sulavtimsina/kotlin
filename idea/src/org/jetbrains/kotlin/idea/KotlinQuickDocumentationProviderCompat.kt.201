/*
 * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.idea

import com.intellij.codeInsight.javadoc.JavaDocExternalFilter
import com.intellij.psi.PsiDocCommentBase
import com.intellij.psi.PsiElement
import com.intellij.psi.PsiFile
import org.jetbrains.kotlin.psi.KtDeclaration
import org.jetbrains.kotlin.psi.KtDeclarationContainer
import java.util.function.Consumer

// BUNCH 201
class KotlinQuickDocumentationProvider : KotlinQuickDocumentationProviderCompatBase() {

    override fun collectDocComments(file: PsiFile, sink: Consumer<PsiDocCommentBase>) {
        fun KtDeclarationContainer.collect(): Unit = declarations.forEach {
            it.docComment?.let { comment -> sink.accept(comment) }
            if (it is KtDeclarationContainer) it.collect()
        }

        if (file is KtDeclarationContainer) file.collect()
    }

    override fun generateRenderedDoc(element: PsiElement): String? {
        val docComment = (element as? KtDeclaration)?.docComment ?: return null

        val result = StringBuilder().also {
            it.renderKDoc(docComment.getDefaultSection(), docComment.getAllSections())
        }

        return JavaDocExternalFilter.filterInternalDocInfo(result.toString())
    }
}